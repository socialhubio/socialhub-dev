---
# API information
swagger: '2.0'
info:
  title: SocialHub Public API
  description: SocialHub Public API Reference
  version: '1.2'
  contact:
    email: support@socialhub.io
host: api.socialhub.io
basePath: /
externalDocs:
  description: SocialHub for Developers
  url: https://socialhub.dev
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  token:
    type: apiKey
    description: Channel specific JWT Access Token (from the Custom Channel Settings)
    name: accesstoken
    in: query
security:
  - token: []

tags:
  - name: General
    description: SocialHub Platform APIs
  - name: Inbox
    description: SocialHub Inbox Product APIs

# API Routes and Operations
paths:
  '/':
    get:
      summary: 'Root Route: Returns basic information for the given JWT'
      description: 'Returns information related to the used access token. Manifest information will be omitted for Reusable Manifests.'
      tags:
        - General
      responses:
        200:
          description: 'Channel and Manifest data'
          schema:
            type: object
            properties:
              channel:
                $ref: '#/definitions/Channel'
              manifest:
                $ref: '#/definitions/Manifest'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/NotFoundError'
        500:
          $ref: '#/responses/InternalServerError'

  '/manifest':
    patch:
      summary: "Partially update a Custom Channel's Manifest"
      description: "A Channel may have a Manifest which defines a Network's capabilities and configures communication with its Integration. A Custom Channel will start off with an empty default Manifest which should be adjusted as needed by the Integration. Not available for Manifests that have been promoted to be reusable."
      tags:
        - General
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Manifest'
      responses:
        200:
          description: 'The updated Manifest object.'
          schema:
            $ref: '#/definitions/Manifest'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        422:
          $ref: '#/responses/WebhookValidationError'
        500:
          $ref: '#/responses/InternalServerError'

  '/channels':
    post:
      summary: 'Creates a Custom Channel (Reusable Manifests)'
      description: 'Integrations with Manifests that have been promoted to be reusable by other customers can use this route to create Channels using the access token passed to the `channelCreation` callback.'
      tags:
        - General
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Channel'
      responses:
        201:
          description: 'The created Custom Channel object.'
          schema:
            $ref: '#/definitions/Channel'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/NotFoundError'
        500:
          $ref: '#/responses/InternalServerError'

  '/channel':
    patch:
      summary: 'Partially update an existing Custom Channel'
      description: "Partially updates the Channel belonging to the passed access token. When updating the Channel using this route its access token will stay the same. Note that the networkId can't be changed in this route."
      tags:
        - General
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Channel'
      responses:
        200:
          description: 'The updated Channel object.'
          schema:
            $ref: '#/definitions/Channel'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/NotFoundError'
        500:
          $ref: '#/responses/InternalServerError'

    delete:
      summary: 'Deactivate a Custom Channel'
      description: "Can be used to deactivate the Channel belonging to the passed access token. After deactivation it's no longer possible to use the JWT and the Customer will be notified via mail that manual action is required in order to re-enable the Channel again"
      tags:
        - General
      parameters:
        - name: reason
          in: query
          description: The reason of channel deactivation
          type: string
      responses:
        204:
          description: Empty response in case of success.
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        404:
          $ref: '#/responses/NotFoundError'
        500:
          $ref: '#/responses/InternalServerError'

  '/inbox/tickets':
    post:
      summary: 'Creates a Ticket'
      description: 'The SocialHub Ticket API allows the cration of Custom Tickets for Custom Channels. A Ticket is an entity managed within the SocialHub Inbox. A Ticket contains the Information about the Interaction (eg. a comment on a Facebook post) it represents.'
      tags:
        - Inbox
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        201:
          description: 'The successfully created Ticket.'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'

  '/inbox/tickets/{ticketId}':
    patch:
      summary: 'Updates a Ticket'
      description: 'Partially updates a Ticket belonging to a Custom Channel.'
      tags:
        - Inbox
      parameters:
        - name: ticketId
          in: path
          description: 'The identifier of the Ticket that should be updated.'
          required: true
          type: string
          pattern: '^[a-f0-9]{24}$'
        - name: reset
          in: query
          description: Moves ticket back to inbox in addition to updating the data if it was already archived. Defaults to false.
          required: false
          type: boolean
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Ticket'
      responses:
        200:
          description: 'The updated Ticket.'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'

  '/inbox/tickets/{ticketId}/replies/{followupId}/success':
    post:
      summary: 'Reply Ticket Action callback route'
      description: 'After receiving the Reply event the Integration should asynchronously attempt to create the Reply on the Network. If the Reply was processed successfully by the Integration, this success callback route should be called.'
      tags:
        - Inbox
      parameters:
        - name: ticketId
          in: path
          description: 'The identifier of the Ticket that a Reply Action was successfully processed for.'
          required: true
          type: string
          pattern: '^[a-f0-9]{24}$'
        - name: followupId
          in: path
          description: 'The identifier of the Reply Followup that was successfully processed.'
          required: true
          type: string
          format: uuid
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - interaction
            properties:
              interaction:
                type: object
                properties:
                  createdTime:
                    description: "Optional: The Reply's creation time (as ISO 8601) on the Network. If this field is not specified the current date will be used."
                    type: string
                    format: date-time
                  networkItemId:
                    description: 'A unique identifier of the Reply within a Custom Channel. A HTTP 409 Conflict will be returned if the identifier has already been used for another Ticket within the same Channel.'
                    type: string
                    pattern: '^[a-zA-Z0-9\/|@&$!?\()[\]{}+*~,;.:=_-]{6,256}$'
                    example: 'answer-a_0000000052'
                  type:
                    description: Ticket type (only available for reusable Manifests)
                    type: string
                    default: TICKET
                    enum: [POST, COMMENT, THREAD, MESSAGE, RATING, ALBUM, PHOTO, MENTION, DM, MEDIA, VIDEO, TWEET, REVIEW, WEB, NEWS, BLOG, FORUM, TICKET, ADPOST]
                  url:
                    description: 'Optional: Link to the Interaction.'
                    type: string
                    format: url
                    example: 'http://example.com/questions/q_0000000001/a_0000000052'
                required:
                  - networkItemId
      responses:
        201:
          description: 'The successfully created Reply-Ticket.'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'

  '/inbox/tickets/{ticketId}/reset/{actionId}':
    post:
      summary: 'Ticket Action Error callback route'
      description: 'Ticket Actions are processed asynchronously by the Integration. To handle cases where the Action has failed, for example because the Integration was unable to apply it on the Network, this callback route informs the Community Managers of the failure.'
      tags:
        - Inbox
      parameters:
        - name: ticketId
          in: path
          description: 'The identifier of the Ticket that the Action failed for.'
          required: true
          type: string
          pattern: '^[a-f0-9]{24}$'
        - name: actionId
          in: path
          description: 'The identifier of the Ticket Action that has failed to be processed.'
          required: true
          type: string
          pattern: '^[a-zA-Z0-9-_]{1,256}$'
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              followupId:
                description: 'Identifier of the followup belonging to the reply action. Required for `reply` and `template_reply` actions.'
                type: string
                format: uuid
                example: 'f5f75b50-6764-11e9-9ce6-3507264c7519'
              reason:
                description: 'Human readable explanation of why the action failed.'
                type: string
                example: 'Failed to create the Reply because the Interaction has been deleted on the Network.'
      responses:
        201:
          description: 'The updated Ticket object.'
          schema:
            $ref: '#/definitions/Ticket'
        400:
          $ref: '#/responses/BadRequestError'
        401:
          $ref: '#/responses/AccessTokenInvalidError'
        403:
          $ref: '#/responses/AccessDenied'
        409:
          $ref: '#/responses/ConflictError'
        500:
          $ref: '#/responses/InternalServerError'

# Reusable data type schema definitions.
definitions:

  ObjectId:
    description: 'Resource identifier string called `ObjectId`.'
    type: string
    pattern: '^[a-f0-9]{24}$'
    example: '5cc1b08ad62ec72e8388cb47'

  Date:
    description: 'ISO 8601 date string'
    type: string
    format: date-time
    example: "2019-01-28T16:58:12.736Z"

  Channel:
    type: object
    description: 'SocialHub Channel Object. A Channel represents a specific connection between the SocialHub and an external data source (eg. a Facebook page).'
    required:
      - name
      - uniqueName
    properties:
      _id:
        $ref: '#/definitions/ObjectId'
      name:
        type: string
        description: 'Human readable name of the Custom Channel.'
        example: 'Custom Channel'
      uniqueName:
        type: string
        description: 'Human readable unique name of the Custom Channel. The value of this field must be unique for all Channels of the Customer.'
        example: 'Custom Channel #1'
      imageUrl:
        type: string
        description: 'Image displayed alongside the Channel name.'
        format: url
        pattern: '^https://'
        example: 'https://app.socialhub.io/uploads/0000000104.png'
      networkId:
        type: string
        description: 'Used to uniquely identify a Channel. Optional but recommended if possible.'
      endpoint:
        type: object
        description: 'Integration/Network specific data.'
        properties:
          expirationTime:
            type: string
            description: "Optional future Date-Time when the Integration's access to the target Network will expire (if applicable)."
            format: date-time
          accessToken:
            type: string
            description: 'After a Custom Channel has been created or reactivated a new access token will be returned which should be used for all further requests for this Channel.'
            pattern: '^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$'
          user:
            type: object
            description: 'Optional information about the user on the target Network that granted access to the Integration (if applicable).'
            properties:
              id:
                type: string
                description: "Unique identifier of the user on the target Network. Example: If the Integration's target network was Facebook, this would be the Facebook User ID of the Facebook Account that was used to authenticate the Integration with."
              name:
                type: string
                description: 'Human readable name of the user on the target Network.'
              profileUrl:
                type: string
                description: 'Link to the user on the target Network.'
                format: uri
              profileImage:
                type: string
                description: "A HTTPS URL to the user's avatar photo on the target Network."
                format: uri
                pattern: '^https://'
      createdTime:
        $ref: '#/definitions/Date'
      accountId:
        $ref: '#/definitions/ObjectId'
      businessHours:
        type: object
        properties:
          timezone:
            description: 'Timezone offset of the following business hours'
            type: number
            example: 2
          daysOfWeek:
            type: array
            items:
              type: object
              properties:
                day:
                  description: 'For each day in the week there will be one item, each numbered from day 1 to 7.'
                  type: number
                  minimum: 1
                  maximum: 7
                  example: 1
                start:
                  description: 'Time when the business hours start (0-24h format)'
                  type: number
                  minimum: 0
                  maximum: 24
                  example: 9
                end:
                  description:  'Time when the business hours end (0-24h format)'
                  type: number
                  minimum: 0
                  maximum: 24
                  example: 17
                workday:
                  description: 'Whether this day is a work day or not'
                  type: boolean

  Manifest:
    type: object
    description: 'SocialHub Manifest Object. A Channel may have a Manifest which defines a Networks capabilities and configures communication with its Integration'
    properties:
      _id:
        $ref: '#/definitions/ObjectId'
      name:
        description: 'Read only. Manifests of normal Custom Channels do not have a name. Manifests that have a name have been promoted to being reusable. The name is what will be shown as Network name on the Channel Settings page.'
        type: string
      branding:
        type: object
        properties:
          icon:
            description: 'HTTPS URL to Network icon (eg. Twitter Bird)'
            type: string
            format: uri
            pattern: '^https://'
            example: 'https://socialhub.example.com/icon.png'
          fallback:
            description: 'HTTPS URL to fallback icon (eg. shown for ticket interactors without avatar)'
            type: string
            format: uri
            pattern: '^https://'
            example: 'https://socialhub.example.com/fallback-icon.png'
          color:
            description: 'HTML Hex color code for Network branding (eg. Facebook blue #3b5998 for Ticket borders)'
            type: string
            pattern: '^#[0-9a-f]{3,6}$'
            example: '#3b5998'
      webhook:
        type: object
        description: 'WebHook specific configuration. A test request will be made whenever this is updated!'
        properties:
          url:
            type: string
            format: url
            pattern: '^https://'
            example: 'https://socialhub.example.com/webhook'
          secret:
            type: string
            description: 'Secret used for request signing. Should be a long random string.'
            minLength: 32
            maxLength: 512
            example: 'a_random_secret_string'
      inbox:
        type: object
        description: 'Configures the actions available on Tickets within the Inbox.'
        properties:
          ticketActions:
            type: array
            items:
              type: object
              required:
                - id
                - label
                - type
              properties:
                type:
                  type: string
                  description: 'Type of the Ticket Action. There may be multiple actions of the same type.'
                  enum: ['reply', 'template_reply', 'button']
                id:
                  type: string
                  description: 'Identifier of the Action. Each Action within a manifest must have a different identifier.'
                  example: 'reply-as-comment'
                label:
                  type: object
                  description: 'Human readable title of the option which will be shown to the user as button label.'
                  required: ['en', 'de']
                  properties:
                    en:
                      type: string
                      minLength: 1
                      maxLength: 256
                      example: 'Reply'
                    de:
                      type: string
                      minLength: 1
                      maxLength: 256
                      example: 'Antworten'
                config:
                  type: object
                  description: 'Configuration options for this Ticket Action.'
                  properties:
                    approvalProcess:
                      type: boolean
                      description: 'Controlling whether the Approval Process feature should be applied for this Ticket Action. Only supported for `reply` and `template_reply` at this moment.'
                      default: true
                    forceTagging:
                      type: boolean
                      description: 'Controlling whether the feature forcing the user to add tag(s) to the ticket should be applied for this Ticket Action.'
                      default: true
                    templates:
                      type: object
                      properties:
                        url:
                          type: string
                          description: 'URL to fetch templates for the template_reply action from. Required for the template_reply action.'
                          format: url
                          example: 'https://socialhub.example.com/templates'
                    timeout:
                      type: object
                      properties:
                        duration:
                          type: string
                          description: 'Time after which the action is no longer available. Uses juration npm module for parsing.'
                          example: '24h'
                        after:
                          type: string
                          description: 'Field the timeout is counted from. Currently only `networkCreationTime` is supported, which bases the timeout on the `ticket.interaction.createdTime` field.'
                          enum: ['networkCreationTime']
                      required:
                        - duration
                        - after
                attachments:
                  type: object
                  description: 'When set allows attachments to be specified for a `reply` ticket action.'
                  properties:
                    noText:
                      type: boolean
                      default: false
                      description: 'When enabled then there is no additional text allowed when an attachment is provided'
                options:
                  type: array
                  description: 'Reply options the user can select from'
                  items:
                    type: object
                    required: ['id', 'label']
                    properties:
                      id:
                        type: string
                        description: 'Unique id of the option'
                      label:
                        type: object
                        description: 'Human readable title of the option which will be shown to the user as button label.'
                        required: [ 'en', 'de' ]
                        properties:
                          en:
                            type: string
                            minLength: 1
                            maxLength: 256
                            example: 'Reply'
                          de:
                            type: string
                            minLength: 1
                            maxLength: 256
                            example: 'Antworten'
                      description:
                        type: string
                        description: 'Optional description of the option'
          rightSidebar:
            type: array
            description: 'Configures the tabs available in the right sidebar after clicking on a Ticket within the Inbox.'
            items:
              type: object
              properties:
                id:
                  type: string
                  description: 'String identifier for this sidebar Tab.'
                  example: 'reply-as-comment'
                label:
                  type: object
                  description: 'Human readable title of the option which will be shown to the user as Tab label.'
                  required: [ 'en', 'de' ]
                  properties:
                    en:
                      type: string
                      minLength: 1
                      maxLength: 256
                      example: 'Reply'
                    de:
                      type: string
                      minLength: 1
                      maxLength: 256
                      example: 'Antworten'
                treeBuilder:
                  type: string
                  description: 'The tree-builder algorithm to use.'
                  enum: ['flatListWithoutRoot', 'flatListWithRoot']
              required:
                - id
                - label
                - treeBuilder
      callbacks:
        type: object
        properties:
          channelCreation:
            description: 'Channel creation callback for Reusable Manifests. Customer will be redirected to this Integration website in order to add new Channels.'
            type: string
            format: url
            pattern: '^https://'
            example: 'https://socialhub.example.com/create'
          channelReactivation:
            description: 'Channel reactivation callback for Reusable Manifests. Customer will be redirected to this Integration website in order to reactivate an existing Channel.'
            type: string
            format: url
            pattern: '^https://'
            example: 'https://socialhub.example.com/reactivate'

  Ticket:
    type: object
    description: 'SocialHub Inbox Ticket Object. A Ticket is an entity managed within the SocialHub Inbox. A Ticket contains the Information about the Interaction (eg. a comment on a Facebook post) it represents.'
    properties:
      _id:
        $ref: '#/definitions/ObjectId'
      accountId:
        $ref: '#/definitions/ObjectId'
      channelId:
        $ref: '#/definitions/ObjectId'
      createdTime:
        $ref: '#/definitions/Date'
      updatedTime:
        $ref: '#/definitions/Date'
      followupTo:
        type: object
        properties:
          followupToId:
            $ref: '#/definitions/ObjectId'
      interaction:
        type: object
        properties:
          networkItemId:
            type: string
            description: 'A unique identifier of the Interaction within a Custom Channel. A HTTP 409 Conflict will be returned if you attempt to create a Ticket with an identifier that has already been used for another Ticket within the same Channel.'
            pattern: '^[a-zA-Z0-9\/|@&$!?\()[\]{}+*~,;.:=_-]{6,256}$'
            example: 'question-q_0000000001'
          root:
            type: object
            properties:
              rooId:
                type: string
                description: 'During Ticket creation: `networkItemId` of the Root-Ticket of this Ticket. Used for right sidebar Tree-Building. If referenced Root-Ticket does not exist a new empty hidden Ticket will be automatically created. Note that SocialHub will store the `interactor.interactorId` that you sent separately. The `interactorId` returned in the response will be the interactor identifier of SocialHub. SocialHub will automatically link the network specific interactorId that you send to the SocialHub specific ID if we have already received it once.'
                pattern: '^[a-zA-Z0-9\/|@&$!?\()[\]{}+*~,;.:=_-]{6,256}$'
          createdTime:
            $ref: '#/definitions/Date'
          updatedTime:
            $ref: '#/definitions/Date'
          url:
            type: string
            description: 'Link to the Interaction. This link will be used by SocialHub Users to eg. allow them to access the Interaction directly on the networks website.'
            format: url
            example: 'http://example.com/questions/q_0000000001'
          link:
            type: string
            description: 'Link shared on the Interaction. Optional if there are pictures, attachments or a message.'
            format: url
            example: 'http://example.com/questions/q_0000000002'
          interactor:
            type: object
            description: 'Information about the person that created the interaction. (eg. a Facebook User).'
            required:
              - name
              - interactorId
            properties:
              interactorId:
                type: string
                description: "A network specific unique identifier of the person that caused this interaction. If multiple Tickets share an interactor with the same id they will be linked automatically (eg. for the right sidebar user history). If the ID matches the Channel's `networkId`, the Ticket will not appear as an unread Ticket in the Inbox because it was most likely caused by an external action by the Customer owning the Channel."
                minLength: 3
              name:
                type: string
                description: 'Name of the person that caused this interaction.'
              url:
                type: string
                description: "URL of the person's profile."
                format: url
              picture:
                type: string
                description: "URL of the person's avatar picture."
                format: url
                pattern: '^https://'
          message:
            type: string
            description: 'Message text of an Interaction (eg. the Text of a Facebook comment). Optional if there are pictures, attachments or a link.'
            maxLength: 10000
            example: 'Hello, can someone help me?'
          pictures:
            type: array
            description: 'List of images of an Interaction (eg. a Facebook post with one or multiple images). Optional if there is a message, link or attachments.'
            items:
              type: object
              required:
                - small
              properties:
                small:
                  type: string
                  description: 'URL of a thumbnail version of the image.'
                  format: url
                  pattern: '^https://'
                  example: 'https://example.com/questions/q_0000000001/images/1/thumbnail.png'
                large:
                  type: string
                  description: 'URL of the original version of the image.'
                  format: url
                  pattern: '^https://'
                  example: 'https://example.com/questions/q_0000000001/images/1/original.png'
          attachments:
            type: array
            description: 'List of file attachments of an Interaction (eg. a Direct Message with one or multiple files attached). Optional if there is a message, link or pictures.'
            items:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  description: 'URL to download the attached file.URL must support HTTPS protocol.'
                  format: url
                  pattern: '^https://'
                  example: 'https://example.com/files/invoice.pdf'
                name:
                  type: string
                  description: 'Attachment filename.'
                  example: 'invoice.pdf'
                size:
                  type: number
                  description: 'Numerical filesize in bytes.'
                  minimum: 0
                  example: 1024
                mimeType:
                  type: string
                  description: 'Attachment filetype as mime-type.'
                  pattern: '^[a-zA-Z]+\\/[a-zA-Z0-9]+((\\.|\\+|\\-)[a-zA-Z0-9]+)*$'
                  example: 'application/pdf'
          rating:
            type: object
            description: 'Stores rating/review information.'
            required:
              - value
              - scale
            properties:
              value:
                type: number
                description: 'Rating value. This would be `7` in a 7/10 rating.'
                minimum: 0
              scale:
                type: number
                description: 'Rating scale. This would be `10` in a 7/10 rating.'
                minimum: 0
                maximum: 100
          type:
            description: Ticket type (only available for reusable Manifests)
            type: string
            default: TICKET
            enum: [POST, COMMENT, THREAD, MESSAGE, RATING, ALBUM, PHOTO, MENTION, DM, MEDIA, VIDEO, TWEET, REVIEW, WEB, NEWS, BLOG, FORUM, TICKET, ADPOST]

# Reusable API response definitions.
responses:
  BadRequestError: # 400
    description: 'The request was malformed and rejected.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'BadRequestError'
        message:
          type: string
          example: ''
  AccessTokenInvalidError: # 401
    description: 'The specified access token is not or no longer valid.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'AccessTokenInvalidError'
        message:
          type: string
          example: ''
  AccessDenied: # 403
    description: 'The client does not have access to the requested resource.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'AccessDenied'
        message:
          type: string
          example: ''
  InsufficientPermissions: # 403
    description: 'The client does not have the required permissions for the operation.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'InsufficientPermissions'
        message:
          type: string
          example: ''
  NotFoundError: # 404
    description: 'The requested resource could not be found.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'NotFoundError'
        message:
          type: string
          example: ''
  NotAcceptableError: # 406
    description: 'The requested acceptable response cannot be provided.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'NotAcceptableError'
        message:
          type: string
          example: ''
  ConflictError: # 409
    description: 'The request is not valid on this entity.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'ConflictError'
        message:
          type: string
          example: ''
  WebhookValidationError: # 422
    description: 'An error occurred while attempting to validate the WebHook.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'WebhookValidationError'
        message:
          type: string
          example: ''
  InternalServerError: # 500
    description: 'There was an unexpected error.'
    schema:
      type: object
      properties:
        code:
          type: string
          example: 'InternalServerError'
        message:
          type: string
          example: ''
